{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#introduction","title":"Introduction","text":"<p>LuaCsForBarotrauma is a modification for Barotrauma that allows you to write Lua scripts to modify the game's behaviour, and also optionally write your own C# code to extend the game's functionality. Here you will find information on how to install, use and mod Barotrauma using LuaCsForBarotrauma.</p>"},{"location":"#installation-and-setup","title":"Installation and Setup","text":"<p>If you are new to LuaCsForBarotrauma, you can find the installation instructions here.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To start using Lua in your Barotrauma mods, you can find the basic information here. If you are more interested in writing C# mods, you can find the information here.</p>"},{"location":"installation/","title":"Installation","text":"<p>This mod currently has 3 main ways you can install it, steam launch command, content package and manual installation. We will go through each one of them here.</p>"},{"location":"installation/#launch-option-install","title":"Launch option install","text":"<p>The mod can be automatically installed and kept up to date via a special steam launch command, this is the easiest way to install the mod and it's recommended for most users. Here's how to do it:</p> <ol> <li> <p>Make sure your game is closed</p> </li> <li> <p>Go to your Steam Library</p> </li> <li> <p>Right Click Barotrauma and Click Properties</p> </li> <li> <p>You should be able to see the Launch Options and below it a text box that you can enter text into</p> </li> <li> <p>Enter the following code into the text box:</p> </li> </ol> <p>Windows: <code>cmd /c \"curl -L -z Luatrauma.AutoUpdater.win-x64.exe -o Luatrauma.AutoUpdater.win-x64.exe https://github.com/Luatrauma/Luatrauma.AutoUpdater/releases/download/latest/Luatrauma.AutoUpdater.win-x64.exe &amp;&amp; start /b Luatrauma.AutoUpdater.win-x64.exe %COMMAND%\"</code></p> <p>Linux: <code>bash -c \"wget https://github.com/Luatrauma/Luatrauma.AutoUpdater/releases/download/latest/Luatrauma.AutoUpdater.linux-x64 &amp;&amp; chmod +x Luatrauma.AutoUpdater.linux-x64 &amp;&amp; ./Luatrauma.AutoUpdater.linux-x64 %command%\"</code></p> <p>MacOS: <code>/bin/zsh -c \"cd Barotrauma.app/Contents/MacOS &amp;&amp; /usr/bin/curl -LOR https://github.com/Luatrauma/Luatrauma.AutoUpdater/releases/download/latest/Luatrauma.AutoUpdater.osx-x64 &amp;&amp; chmod +x Luatrauma.AutoUpdater.osx-x64 &amp;&amp; ./Luatrauma.AutoUpdater.osx-x64 %command%/Contents/MacOS/Barotrauma\"</code></p> <p>And you are done. Now every time you launch the game, the mod will be automatically installed and kept up to date. If you want to uninstall the mod, just remove the launch command and verify the integrity of the game files.</p>"},{"location":"installation/#content-package-install","title":"Content package install","text":"<p>You can also install this mod by downloading the content package on the steam workshop, this used to be the old way to install the mod before the steam launch command was introduced, but it's still a valid way to install the mod.</p> <ol> <li> <p>Go to the steam workshop page of the mod: <code>https://steamcommunity.com/workshop/filedetails/?id=2559634234</code></p> </li> <li> <p>Click the subscribe button</p> </li> <li> <p>Open the game, go to the mods tab and enable the mod</p> </li> <li> <p>Now, when hosting a server, you will need to select the LuaCs server executable</p> </li> <li> <p>If all you want is server-side, then you can stop here, you are done, but if you want client-side, continue</p> </li> <li> <p>While hosting a server with the server executable, press F3 and type <code>install_cl_lua</code> and press enter</p> </li> <li> <p>Restart the game and you are done</p> </li> </ol> <p>Note, the client-side installation will be lost if you verify the integrity of the game files or if a new game update is released, so you will need to repeat the process if that happens. Also note that you need to keep the content package updated, otherwise you can run into issues.</p>"},{"location":"installation/#manual-install","title":"Manual install","text":"<p>And lastly, you can manually install the mod by simply downloading the patch files and pasting them into your game files.</p> <p>First you need to download the correct patch that corresponds to your platform, head over to <code>https://github.com/evilfactory/LuaCsForBarotrauma/releases/tag/latest</code> and choose which patch you want to install. For example, if I want to install the mod on my windows machine, I'll download <code>luacsforbarotrauma_patch_windows_client.zip</code>.</p> <p>If this patch is for a dedicated server, use the patch_XXXXXXX_server.zip version</p> <p>After downloading the patch file that you want to use, you will need to now find where your game files are located, you can do that by:</p> <ol> <li> <p>Going to your steam library</p> </li> <li> <p>Right clicking Barotrauma</p> </li> <li> <p>Clicking Manage -&gt; Browse Local Files</p> </li> <li> <p>Your file explorer should open with where your game files are located.</p> </li> <li> <p>(MacOS) When going to the game files in MacOS, you will probably notice you aren't in the actual game files, you have to right click the Barotrauma application, and click \"Show Package Contents\", then navigate to Contents -&gt; MacOS, this is where you will put the patch files.</p> </li> </ol> <p>Now, all you have to do is extract the patch files you downloaded, and paste their files into your game files folder (or in case of dedicated servers, where your server is installed), this should prompt you to replace a bunch of .dll files.</p> <p>Note, as with the content package, you will need to reapply the patch files every time you verify the integrity of the game files or if a new game update is released.</p> <p>If you are confused, there's this video showing how to install client-side manually on Windows:</p>"},{"location":"installation/#checking-if-the-mod-has-been-installed-correctly","title":"Checking if the mod has been installed correctly","text":"<p>After installing the mod, you can test if it was successfully installed by testing the debug console (F3) commands: <code>cl_reloadluacs</code> (for client-side) or <code>reloadluacs</code> (for server-side, you need to be hosting a server), if the command is not recognized, then the mod was not installed correctly.</p>"},{"location":"cs/introduction/","title":"Introduction","text":"<p>LuaCsForBarotrauma allows modifications to be wrriten in CSharp, this type of mod is very powerful and can be used to extend the game's functionality in ways that are not possible even with Lua. But it comes with a cost, CSharp mods are not sandboxed and can be used to run malicious code, so it's disabled by default and must be enabled in the LuaCs Settings menu by the user.</p>"},{"location":"cs/introduction/#enabling","title":"Enabling","text":"<p>To enable CSharp mod loading, you will have to go to your mainmenu, click top left LuaCs Settings, and enable the <code>Enable CSharp</code> option. If you do not have CSharp enabled and you join a server that has CSharp mods, you will receive a popup asking if you want to enable it for that session.</p> <p>You can also enable by setting the <code>EnableCSharp</code> option in the <code>LuaCsConfig.xml</code> file found in the game root folder to <code>true</code>. <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;LuaCsSetupConfig EnableCsScripting=\"true\" TreatForcedModsAsNormal=\"false\" PreferToUseWorkshopLuaSetup=\"false\" DisableErrorGUIOverlay=\"false\" HideUserNames=\"true\" /&gt;\n</code></pre></p>"},{"location":"cs/introduction/#development","title":"Development","text":"<p>CSharp mods can be developed in two different ways, so called In-Memory CSharp Mods and Assembly CSharp Mods. Here is a brief explanation of both:</p> <p>In-Memory CSharp Mods are mods that have all their .cs source files stored inside the mod folder and have their code compiled at runtime. This type of mod is the easier to setup since it only requires you to have the .cs files in the mod folder, but it comes at the cost of being slower to load and not having a full development setup with debugging. You can find more information on how to setup an In-Memory CSharp mod in the In-Memory CSharp Mods section.</p> <p>Assembly CSharp Mods are mods that are compiled into a .dll file and loaded by the game at runtime. This type of mod is harder to setup since it requires you to have an IDE (such as Visual Studio) and a more complex project setup, but it comes with the benefit of you being able to take advantage of the .NET development experience fully. You can find more information on how to setup an Assembly CSharp mod in the Assembly CSharp Mods section.</p>"},{"location":"cs/setup-assembly-csharp/","title":"Assembly CSharp Mod","text":"<p>One type of CSharp mod that can be created is an assembly mod. This type of mod is compiled into a .dll file and requires the distribution of dll files.</p> <p>Assembly mods can be debugged in your favourite IDE and take full advantage of the entire .NET ecosystem. They take an initial effort to set up, but can be more powerful and flexible.</p>"},{"location":"cs/setup-assembly-csharp/#getting-started","title":"Getting Started","text":""},{"location":"cs/setup-assembly-csharp/#1-ide-setup","title":"1. IDE Setup","text":"<p>You will need an IDE that supports <code>.NET 6</code> as a platform/SDK target. Visual Studio 2022 is recommended. You can download it here. Other IDEs like JetBrains Rider also work, but there is no guarantee that the project will function as expected, although there should be little issue.</p>"},{"location":"cs/setup-assembly-csharp/#2-project-skeleton","title":"2. Project skeleton","text":"<p>Download or clone the following repository https://github.com/MapleWheels/VSProjectSkeleton, this contains the skeleton project that we will be using as the basis for this tutorial. Most things that need to be setup have already been done.  - If you do not have Git Tools installed, it is recommended that you get familiar with them as it makes life easier. Download and install it.</p> <p>Make sure to extract the contents of the repository to a folder that you can easily access if you decided to manually download the zip file from github. You may also rename the directory to the name of your mod if you want.</p>"},{"location":"cs/setup-assembly-csharp/#3-reference-dlls","title":"3. Reference dlls","text":"<p>You also need to download the publicized reference dlls from https://github.com/evilfactory/LuaCsForBarotrauma/releases/download/latest/luacsforbarotrauma_refs.zip. This contains the publicized reference dlls that are required to build the project.</p> <p>After downloading the zip file, extract the contents to the <code>Refs</code> folder in project skeleton directory. The directory structure should look like this:</p> <pre><code>./Refs\n----/Linux/Barotrauma.dll\n----/Linux/DedicatedServer.dll\n----/Linux/BarotraumaCore.dll\n----/Windows/Barotrauma.dll\n----/Windows/DedicatedServer.dll\n----/Windows/BarotraumaCore.dll\n...other files\n</code></pre>"},{"location":"cs/setup-assembly-csharp/#4-setup-the-project","title":"4. Setup the project","text":"<p>First rename the <code>MyModName.sln</code> file to the name of your mod. IE: <code>ExampleMod.sln</code>.</p> <p>Then open up the Solution file (<code>.sln</code>) from the Skeleton Project in Visual Studio. Just verify that there are not errors related to \"Unable to find Reference\", this means that all assemblies in <code>/Refs</code> have be found successfully.</p> <p>After that, in your IDE, you will need to do the following for all <code>.csproj</code> files:</p> <p><pre><code>- LinuxClient.csproj\n- LinuxServer.csproj\n- OSXClient.csproj\n- OSXServer.csproj\n- WindowsClient.csproj\n- WindowsServer.csproj\n</code></pre>  - 1. Open the Project Configuration for the <code>.csproj</code> file by right-clicking and selecting <code>Properties</code>.  - 2. Change the <code>AssemblyName</code> to the name of your mod WITHOUT SPACES OR SPECIAL CHARACTERS. Example: <code>SampleMod</code>  - 3. Change the <code>Root Namespace</code> to either your mod's Assembly Name or mod's short version without spaces in plain English. Example: <code>SampleMod</code>.</p> <p>Note: If you do not want either the <code>Client</code> plugin or the <code>Server</code> plugin (IE. Client-side or Server-side ONLY mod), then you must delete all projects that end with <code>Server</code>. Example: <code>LinuxServer</code>, <code>WindowsServer</code>. Warning, this is generally irreversible and will require you to setup new Cs Projects if you want a client in the future.</p>"},{"location":"cs/setup-assembly-csharp/#5-setting-up-msbuild-to-copy-files-into-local-mods","title":"5. Setting up MSBuild to Copy Files into Local Mods.","text":"<p>You will have to do the following for the <code>Build.props</code> file found in the main project directory:</p> <ol> <li> <p>Open the file in your Text Editor or IDE of choice.</p> </li> <li> <p>Locate the line <code>ModDeployDir</code>, IE: <pre><code>&lt;PropertyGroup&gt;\n    &lt;!-- IMPORTANT: Should point to &lt;Barotrauma_Install&gt;\\LocalMods\\&lt;MyModName&gt;\\ --&gt;\n    &lt;!-- IMPORTANT: ModDeplyDir Path must end with '\\' --&gt;\n    &lt;ModDeployDir&gt;..\\LUATRAMA_DEBUG_LOCALMODS_MYMODDIR\\&lt;/ModDeployDir&gt;\n    &lt;!-- IMPORTANT: Avoid the use of special (IE: / : ; , \\ &lt; &gt; ?) (periods \".\" are good) and non-english characters in the AssemblyName.--&gt;\n    &lt;AssemblyName&gt;MyModName&lt;/AssemblyName&gt;\n&lt;/PropertyGroup&gt;\n</code></pre></p> </li> <li> <p>Change the <code>ModDeployDir</code> value from <code>..\\LUATRAMA_DEBUG_LOCALMODS_MYMODDIR\\</code> to the path of your Barotrauma installation's <code>LocalMods</code> directory. IE: <code>C:\\Program Files (x86)\\Steam\\steamapps\\common\\Barotrauma\\LocalMods\\MyModName\\</code>.</p> </li> <li> <p>IMPORTANT: The value must end with <code>/</code> or <code>\\</code> . IE: <code>...\\LocalMods\\ModdingToolkit\\</code>.</p> </li> <li> <p>Replace <code>MyModName</code> with a valid assembly name, this should be similar to your mod name but does not need to match. This name should:</p> </li> <li>Not include spaces.</li> <li>Not include special characters except periods ( . ), which are allowed.</li> <li>Use english characters.</li> <li>Recommended: Follow the convention of <code>ModName</code> or <code>PackageName.LibraryName</code> for libraries, IE: <code>ModdingToolkit.GUI</code>.</li> </ol>"},{"location":"cs/setup-assembly-csharp/#6-wrapping-up","title":"6. Wrapping up","text":"<p>After setting up the project, you can start coding your mod. The project is already set up to build the mod into the <code>LocalMods</code> directory of your Barotrauma installation. You can now build the project and the mod dll files will be copied to the <code>LocalMods</code> directory.</p>"},{"location":"cs/setup-assembly-csharp/#extras","title":"Extras","text":""},{"location":"cs/setup-assembly-csharp/#setting-up-a-debug-build-of-luacsforbarotrauma","title":"Setting up a debug build of LuaCsForBarotrauma","text":"<p>This will give us a debug build of LuaCsForBarotrauma. A debug build gives us access to many tools as well as the <code>DEBUG</code> symbol for writing test/print code that will not be run in the release version.</p> <ol> <li>Clone the LuaCsForBarotrauma repository to your local drive. If you do not have Git Tools installed, please download and install it.</li> <li> <p>Important: When cloning, use the command <code>git clone --recurse-submodules --remote-submodules https://github.com/evilfactory/LuaCsForBarotrauma.git</code>. This will download the submodules automatically.</p> </li> <li> <p>Open up the LuaCs Solution in your IDE based on your Operating System, one of:</p> </li> </ol> <p><code>asciidoc - WindowsSolution.sln - MacSolution.sln - LinuxSolution.sln</code></p> <p>-- NOTE: This assumes that you are using the <code>WindowsSolution.sln</code>. For other platforms, the naming of files may be slightly different (MacXXX, LinuxXXX, where 'XXX' is either \"Client\" or \"Server\").</p> <ol> <li> <p>In the Project Settings for <code>WindowsClient</code> and <code>WindowsServer</code>, you want to change the <code>Platform Target</code> from <code>Any CPU</code> to <code>x64</code>. This is necessary for OpenAL code to build successfully.</p> </li> <li> <p>Build the whole Solution (<code>Build -&gt; Build Solution</code>). This will create the necessary dependencies from libraries and make sure that there are no errors at this point.\\</p> </li> <li> <p>For both the <code>WindowsClient</code> and <code>WindowsServer</code> projects, set their output/build type to <code>DEBUG</code> (should be in a drop-down menu at the top next to a green play button).\\</p> </li> <li> <p>Select <code>Build Solution</code>. This will generate Debug builds for use. This debug build will now exist in <code>./Barotrauma/bin/DebugXXX/net6.0/</code> where <code>XXX</code> is based on your Solution choice. IE. <code>./Barotrauma/bin/DebugWindows/net6.0</code>.</p> </li> </ol> <p>Now instead of using your Barotrauma steam installation, you can use the debug build of LuaCsForBarotrauma to test your mods. Simply put your mod in the <code>LocalMods</code> directory of the debug build and set the ModDeployDir in the <code>Build.props</code> file.</p>"},{"location":"cs/setup-in-memory-csharp/","title":"In-memory CSharp Mod","text":"<p>One type of CSharp mod that can be created is an in-memory mod. This type of mod is compiled in memory and does not require the distribution of dll files. This type of mod is relatively easy to create and is useful for small mods that do not require a lot of complexity.</p> <p>The disadvantage of in-memory mods is that they can take up a chunk of initialization time, as the mod must be compiled every time the mod is loaded. This type of mod also can't be easily debugged in your IDE or take full advantage of the entire .NET ecosystem.</p>"},{"location":"cs/setup-in-memory-csharp/#getting-started","title":"Getting Started","text":"<p>First you need to create a new Barotrauma mod as you are already familiar with. Then you need to create a folder named <code>CSharp</code> in the root of your mod folder. This is where you will put all your C# code files. All .cs source files in this folder will be compiled into the mod.</p> <p>Source files inside the CSharp/Server and CSharp/Client folders will only be compiled for the server and client respectively. Files in the CSharp/Shared folder will be compiled for both the server and client.</p>"},{"location":"cs/setup-in-memory-csharp/#example-mod","title":"Example mod","text":"<p><code>&lt;mod_root&gt;/CSharp/Shared/ExampleMod.cs</code></p> <pre><code>using System;\nusing Barotrauma;\n\n\n// This is required so that the .NET runtime doesn't complain about you trying to access internal Types and Members\n[assembly: IgnoreAccessChecksTo(\"Barotrauma\")]\n[assembly: IgnoreAccessChecksTo(\"BarotraumaCore\")]\n[assembly: IgnoreAccessChecksTo(\"DedicatedServer\")]\nnamespace ExampleNamespace {\n    partial class ExampleMod : IAssemblyPlugin {\n        public void Initialize()\n        {\n            // When your plugin is loading, use this instead of the constructor\n            // Put any code here that does not rely on other plugins.\n            LuaCsLogger.Log(\"ExampleMod loaded!\");\n        }\n\n        public void OnLoadCompleted()\n        {\n            // After all plugins have loaded\n            // Put code that interacts with other plugins here.\n        }\n\n        public void PreInitPatching()\n        {\n            // Not yet supported: Called during the Barotrauma startup phase before vanilla content is loaded.\n        }\n\n        public void Dispose()\n        {\n            // Cleanup your plugin!\n            LuaCsLogger.Log(\"ExampleMod disposed!\");\n        }\n    }\n}\n</code></pre>"},{"location":"cs/development/harmony/","title":"Using Harmony","text":"<p>This is the main way you will be modifying the game. Harmony is a library that allows you to patch methods in the game's code. This allows you to change the behavior of the game without modifying the game's code directly.</p> <p>You can find the Harmony documentation here https://harmony.pardeike.net/articles/basics.html it should explain everything you need to know about Harmony and how to use it.</p>"},{"location":"lua/errors/","title":"Errors","text":"<p>As you write Lua code, you will inevitably encounter errors. This page lists the most common errors you might encounter, and how to fix them.</p>"},{"location":"lua/errors/#syntax-errors","title":"Syntax errors","text":"<p>Syntax errors happen when you write code that doesn't follow the rules of the Lua language. These errors are usually easy to fix, as the error message will tell you exactly where the problem is. These type of errors are usually caused by typos, missing brackets, or incorrect use of operators, you can search for the error message in any search engine to find out what the error means.</p>"},{"location":"lua/errors/#attempt-to-index-a-nil-value","title":"Attempt to index a nil value","text":"<p>One of the most common errors you will encounter is the \"attempt to index a nil value\" error. This error happens when you try to access a field of a variable that is <code>nil</code>. This can happen when you try to access a field of a variable that doesn't exist, or when you try to access a field of a variable that is <code>nil</code>. To fix this error, you need to make sure that the variable you are trying to access is not <code>nil</code>.</p> <p>For example: <pre><code>Hook.Add(\"character.created\", \"foobar\", function(character)\n    local affliction = character.CharacterHealth.GetAffliction(\"bleeding\")\n\n    -- if affliction == nil then return end -- uncomment to fix the error\n\n    if affliction.Strength &gt; 10 then\n        print(\"Character is bleeding heavily!\")\n    end\nend)\n</code></pre></p> <p>This code will throw an \"attempt to index a nil value\" error in some cases because the <code>GetAffliction</code> function might return <code>nil</code> if the affliction doesn't exist. To fix this error, you need to check if the <code>affliction</code> variable is not <code>nil</code> before trying to access to do anything with it.</p>"},{"location":"lua/errors/#attempt-to-call-a-nil-value","title":"Attempt to call a nil value","text":"<p>Similarly to the attempt to index a nil value error, this one happens when you call a function that doesn't exist. For example:</p> <pre><code>somethingThatDoesntExist()\n</code></pre>"},{"location":"lua/errors/#cannot-access-field-xxxxx-of-userdata-errors","title":"Cannot access field xxxxx of userdata errors","text":"<p>This error happens when you try to access a field of an userdata object that doesn't exist or is not accessible. For example:</p> <pre><code>Hook.Add(\"character.created\", \"foobar\", function(character)\n    print(character.somethingThatDoesntExist)\nend)\n</code></pre>"},{"location":"lua/errors/#attempt-to-access-instance-member-xxxxx-from-a-static-userdata","title":"Attempt to access instance member \"xxxxx\" from a static userdata","text":"<p>This error happens when you try to access a member (function or field) that requires an instance to be accessed, but you are trying to access it as if it was a static member. For example:</p> <pre><code>print(Character.Name)\n</code></pre> <p><code>Character</code> is a static userdata object, you can only access static members from it, since it doesn't represent a specific instance of a character. To access instance members, you need to have an instance of a character. For example:</p> <pre><code>Hook.Add(\"character.created\", \"foobar\", function(character)\n    print(character.Name)\nend)\n</code></pre>"},{"location":"lua/errors/#net-related-errors","title":".NET related errors","text":"<p>These errors happen for a variety of reasons, but they are usually caused by calling a method on the C# side with a value it wasn't expecting, for example a nil value. Most of the time you will be given the line number in the Lua code that triggered the error, so you can easily find out what caused it.</p>"},{"location":"lua/getting-started/","title":"Getting Started with Lua Modding","text":"<p>Here you will learn how to create your first Lua mod for Barotrauma, this guide assumes that you have some basic knowledge of Lua, if you don't, don't worry, Lua is a very simple language to learn, and you can learn it in a few hours provided you have some programming experience.</p> <p>You can check these websites for more information about the Lua programming language itself: </p> <ul> <li>https://www.lua.org/manual/5.2/ </li> <li>https://www.tutorialspoint.com/lua/lua_overview.htm </li> </ul>"},{"location":"lua/getting-started/#preparing-your-environment","title":"Preparing your environment","text":"<p>The only thing you will need is a text editor, you don't want to be using Notepad! You can use any text editor that supports Lua, heres a few of them:</p> <ul> <li>VSCode with the Lua extension</li> <li>Sublime Text</li> <li>Notepad++</li> </ul>"},{"location":"lua/getting-started/#creating-your-first-mod","title":"Creating your first mod","text":"<p>First you need to have a standard Barotrauma mod, if you don't know how to create one, head over to the Barotrauma Modding Guide and follow the instructions there.</p> <ol> <li>After you have created your mod, inside your mod folder, create a folder called Lua. This is where you will put all your Lua scripts. </li> <li>Inside the Lua folder, create a folder called Autorun, this is where you will put all your Lua scripts that will be executed automatically.</li> <li>Inside the Autorun folder, create a new file called test.lua, open it in your text editor and type in <code>print(\"Hello, world!\")</code>.</li> <li>The path to your script should look something like this: <code>LocalMods/MyMod/Lua/Autorun/test.lua</code>.</li> <li>Now you can begin testing your mod.</li> </ol>"},{"location":"lua/getting-started/#when-lua-mods-get-executed","title":"When Lua mods get executed","text":"<p>Lua mods get executed in multiple situations, here's all of them:</p> <ul> <li>When entering the sub editor.</li> <li>When starting a new singleplayer game.</li> <li>When connecting to a server and finishing all mod downloads.</li> <li>When hosting a server, two instances of Lua will be executed, one for when YOUR client connects to the local server, and another for the local server itself.</li> </ul>"},{"location":"lua/getting-started/#testing-your-mod","title":"Testing your mod","text":"<p>You can test your mod by doing any of the actions previously mentioned and checking the debug console logs, do note, in the case of hosting a server, you will not see the first prints of the server, because the server will print those before your client joins the server.</p> <p>To reload all Lua scripts, you can use the console commands <code>cl_reloadlua</code> and <code>reloadlua</code>, the latter reloads the Lua scripts for the server, and the former reloads the Lua scripts in your client. You can use these commands anytime, as long as your Lua script was built to handle being reloaded mid game.</p> <p>Knowing all of this, in the Lua initialization console logs, you should be able to see the <code>Hello, world!</code> print message you added to your script!</p>"},{"location":"lua/getting-started/#next-steps","title":"Next steps","text":"<p>Now that you have created your first Lua mod, you can start learning more about the Lua API and how to interact with the game code. You can start by checking the topics in the sidebar to the left. It's also important to check out the API Reference to see everything that is available to you.</p>"},{"location":"lua/hooks/","title":"Hooks","text":"<p>This is the primarily way to interact with the game code from Lua. Hooks are used to listen to events that happen in the game, and you can even call your own hooks from your own code.</p>"},{"location":"lua/hooks/#adding-hooks","title":"Adding hooks","text":"<p>Hooks can be added like this:</p> <pre><code>Hook.Add(\"chatMessage\", \"test\", function(message, client)\n    print(client.Name .. \" has sent \" .. message)\nend)\n</code></pre>"},{"location":"lua/hooks/#calling-hooks","title":"Calling hooks","text":"<p>You can also call hooks with the following code:</p> <pre><code>Hook.Call(\"myCustomEvent\", {\"some\", \"arguments\", 123})\n</code></pre>"},{"location":"lua/hooks/#xml-status-effect-hooks","title":"XML Status Effect Hooks","text":"<p>A new XML Status Effect tag is also available to add hooks to status effects. </p> <pre><code>&lt;StatusEffect type=\"OnUse\"&gt;\n    &lt;Hook name=\"doSomething\" custom=\"thing\" /&gt;\n&lt;/StatusEffect&gt;\n</code></pre> <pre><code>Hook.Add(\"doSomething\", function(effect, deltaTime, item, targets, worldPosition, element)\n    print(effect, ' ', item)\n\n    -- You can also access the XML custom parameters\n    print(element.GetAttributeString(\"custom\", \"default value\"))\n\n    -- returning true will prevent the status effect from being applied\n    return true\nend)\n</code></pre>"},{"location":"lua/networking/","title":"Networking","text":"<p>Networking is a complex topic, but we will try to go through it as simply as possible.</p>"},{"location":"lua/networking/#whats-a-server","title":"Whats a Server?","text":"<p>A server is a computer program or device that provides a service to another computer program and its user, also known as the client. In Barotrauma, the server is the one who hosts the game and is responsible for syncing the game state between all clients. When you host a server through the in game buttons, what effectively happens is that the game starts up a process called <code>DedicatedServer.exe</code>, and then tells your game to connect to it.</p>"},{"location":"lua/networking/#whats-a-client","title":"Whats a Client?","text":"<p>A client is a piece of computer hardware or software that accesses a service made available by a server. In Barotrauma, the client is your game itself, it's what connects to servers and receives the game state from the server.</p>"},{"location":"lua/networking/#how-do-i-deal-with-this-in-lua","title":"How do I deal with this in Lua?","text":"<p>Your Lua code can be running on the server or the client, and you need to be aware of this when writing your code. You can check if you are running on the server or the client by checking the global variables <code>SERVER</code> and <code>CLIENT</code>. Both of these variables are NEVER true at the same time.</p> <p>You can also check if you are running in singleplayer or multiplayer by checking the global variables <code>Game.IsSingleplayer</code> and <code>Game.IsMultiplayer</code>. On singleplayer, SERVER is never true. And if you for some reason want to know if you are running inside a Dedicated Server, you can use <code>Game.IsDedicated</code>.</p>"},{"location":"lua/networking/#sending-network-messages","title":"Sending Network Messages","text":"<p>Networking messages are used to send data between the server and the client, they are your primary way of syncing data between the server and the client.</p>"},{"location":"lua/networking/#from-client-to-server","title":"From Client to Server","text":"<pre><code>if CLIENT then\n    -- send from client to server\n    local message = Networking.Start(\"foobar\")\n    message.WriteString(\"hello\")\n    Networking.Send(message)\nend\n\nif SERVER then\n    -- receive in server\n    Networking.Receive(\"foobar\", function(message, client)\n        print(client.Name .. \" sent \" .. message.ReadString())\n    end)\nend\n</code></pre>"},{"location":"lua/networking/#from-server-to-client","title":"From Server to Client","text":"<pre><code>if CLIENT then\n    Networking.Receive(\"foobar\", function(message)\n        print(message.ReadString())\n    end)\nend\n\nif SERVER then\n    -- send from server to client\n    local message = Networking.Start(\"foobar\")\n    message.WriteString(\"hello\")\n\n    -- The second argument is the client you want to send the message to, if you leave it nil, it will send to all clients\n    Networking.Send(message, Client.ClientList[1].Connection)\nend\n</code></pre>"},{"location":"lua/networking/#serializable-properties","title":"Serializable Properties","text":"<p>Serializable Properties are special class members in Barotrauma that are able to be synced with clients (and also with the server in some cases), they are very useful for when you want to change a property but don't want to write any client-side code.</p> <p>Example showing how to sync the sprite color of an item without any client-side code:</p> <pre><code>local item = ...\n\nitem.SpriteColor = Color(0, 0, 255, 255)\n\nlocal property = item.SerializableProperties[Identifier(\"SpriteColor\")]\nNetworking.CreateEntityEvent(item, Item.ChangePropertyEventData(property, item))\n</code></pre> <p>This is also possible to do with item components, changing the light color of a light component:</p> <pre><code>local item = ...\nlocal light = item.GetComponentString(\"LightComponent\")\n\nlight.LightColor = Color(0, 0, 255, 255)\n\nlocal property = light.SerializableProperties[Identifier(\"LightColor\")]\nNetworking.CreateEntityEvent(item, Item.ChangePropertyEventData(property, light))    \n</code></pre>"},{"location":"lua/patching/","title":"Patching","text":"<p>It's also possible to patch methods in the game code. This is useful for altering of something in the game that doesn't have a hook. This is done by using the <code>Hook.Patch</code> function.</p>"},{"location":"lua/patching/#postfix","title":"Postfix","text":"<p>Postfix patches are functions that get called after the original method executes.</p> <pre><code>Hook.Patch(\"Barotrauma.CharacterInfo\", \"IncreaseSkillLevel\", function(instance, ptable)\n  print(string.format(\"%s gained % xp\", instance.Character.Name, ptable[\"increase\"]))\nend, Hook.HookMethodType.After)\n</code></pre>"},{"location":"lua/patching/#prefix","title":"Prefix","text":"<p>Prefixes are functions that get called before the original method executes. For more advanced use cases, they can also be used to modify the incoming parameters or prevent the original method from executing.</p> <pre><code>Hook.Patch(\n  \"Barotrauma.Character\",\n  \"CanInteractWith\",\n  {\n    \"Barotrauma.Item\",\n     -- ref/out parameters are supported\n     \"out System.Single\",\n     \"System.Boolean\"\n  },\n  function(instance, ptable)\n    -- This prevents the original method from executing, so we're\n    -- effectively replacing the method entirely.\n    ptable.PreventExecution = true\n    -- Modify the `out System.Single` parameter\n    ptable[\"distanceToItem\"] = Single(50)\n    -- This changes the return value to \"null\"\n    return nil\n  end, Hook.HookMethodType.Before)\n</code></pre>"}]}